>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> My_BaseGeometry = BaseGeometry()

>>> try:
...     My_BaseGeometry.integer_validator("Bond_00", 7)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))

>>> My_BaseGeometry.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> My_BaseGeometry.integer_validator()
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> My_BaseGeometry.integer_validator("James")
Traceback (most recent call last):
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

>>> My_BaseGeometry.integer_validator("Bond_00", 0)
Traceback (most recent call last):
ValueError: Bond_00 must be greater than 0

>>> My_BaseGeometry.integer_validator("Bond_00", -7)
Traceback (most recent call last):
ValueError: Bond_00 must be greater than 0

>>> My_BaseGeometry.integer_validator("Bond_00", "7")
Traceback (most recent call last):
TypeError: Bond_00 must be an integer

>>> My_BaseGeometry.integer_validator("Bond_00", (7,))
Traceback (most recent call last):
TypeError: Bond_00 must be an integer

>>> My_BaseGeometry.integer_validator("Bond_00", [7])
Traceback (most recent call last):
TypeError: Bond_00 must be an integer

>>> My_BaseGeometry.integer_validator("Bond_00", True)

>>> My_BaseGeometry.integer_validator("Bond_0", {0, 7})
Traceback (most recent call last):
TypeError: Bond_0 must be an integer

>>> My_BaseGeometry.integer_validator("Bond_007", None)
Traceback (most recent call last):
TypeError: Bond_007 must be an integer